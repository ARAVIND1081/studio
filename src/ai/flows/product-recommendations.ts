
// This is an autogenerated file from Firebase Genkit.
'use server';
/**
 * @fileOverview Product recommendation AI agent.
 *
 * - productRecommendations - A function that handles the product recommendation process.
 * - ProductRecommendationsInput - The input type for the productRecommendations function.
 * - ProductRecommendationsOutput - The return type for the productRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProductRecommendationsInputSchema = z.object({
  viewingHistory: z.array(
    z.string().describe('The product IDs the user has viewed')
  ).describe('The user viewing history, which is a list of product IDs.'),
});
export type ProductRecommendationsInput = z.infer<typeof ProductRecommendationsInputSchema>;

const ProductRecommendationsOutputSchema = z.object({
  productRecommendations: z.array(
    z.string().describe('The product IDs that are recommended')
  ).describe('A list of product recommendations based on the user viewing history.'),
});
export type ProductRecommendationsOutput = z.infer<typeof ProductRecommendationsOutputSchema>;

export async function productRecommendations(input: ProductRecommendationsInput): Promise<ProductRecommendationsOutput> {
  return productRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'productRecommendationsPrompt',
  input: {schema: ProductRecommendationsInputSchema},
  output: {schema: ProductRecommendationsOutputSchema},
  prompt: `You are a product recommendation expert.

  Based on the user's viewing history, you will recommend products that the user might be interested in.
  Do not recommend products that the user has already viewed.

  User viewing history: {{{viewingHistory}}}
  `,
});

const productRecommendationsFlow = ai.defineFlow(
  {
    name: 'productRecommendationsFlow',
    inputSchema: ProductRecommendationsInputSchema,
    outputSchema: ProductRecommendationsOutputSchema,
  },
  async input => {
    // The prompt() call itself might throw if the API service is unavailable (e.g., 503 error).
    // This will be caught by the calling component (ProductRecommendations.tsx).
    const {output} = await prompt(input); 
    
    if (!output) {
      // This handles cases where the API call was successful but the model didn't return valid/structured output.
      console.warn('[productRecommendationsFlow] AI model returned no structured output. Returning empty recommendations.');
      return { productRecommendations: [] };
    }
    return output;
  }
);

